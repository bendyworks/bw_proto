<h1 class="blog-title">From Ruby to Haskell, Part 2: Similarity, Refactoring, and Patterns</h1>


<p>It has been a while since I last wrote one of these posts and I didn't
want to leave people sitting by their computer desks forever, waiting
with bated breath for the next one to pop up in your Google Reader
feed (...whispers from the Internet...), okay never mind that Google
Reader thing.</p>

<p>I had a lot to cover in my exploration of Ruby and Haskell and I don't
even feel like I made a big chip in the surface of all that I wanted to
talk about. But I'm going to keep at it until I feel like I've said all
I want to cover.</p>

<p>This time I want to talk about three subjects:</p>

<ol>
<li>How ruby and haskell are similar and, unavoidably, how they're different.</li>
<li>Refactoring code because I don't think that this is solely the domain of the OOP'er; refactoring functional code is <em>way cool</em></li>
<li>Patterns also don't belong to any sort of programmer in particular. Patterns, and here I mean something like "an underlying repetition or similarity". Functional programming has some great patterns which, once you start to model code with them, you can claim great wins in concision.</li>
</ol>


<p>But as I was writing this I wondered what order I would cover these
subjects and the more I thought about it the less sense it made to me to
talk about any one of them without pulling in the other two. What sort
of refactoring can you do that <em>isn't</em> pulling out some commonality
among seemingly-disparate hunks of code? Hmmm?</p>

<p>That being said, let me talk about a refactoring story.</p>

<h2>My refactoring story</h2>

<p>I was strolling through a codebase when I found a bit of code... Well
that's not quite the truth. My program raised an error and then as I was
debugging I found the following:</p>

<pre><code>def to_s
  string = ""
  string += self.description if self.description
  string += self.name if self.name
  string += self.location if self.location
  string += self.user.try(:company) if self.user
  string += self.category.name
  string += self.event_type
  string
end
</code></pre>

<p>Seasoned Rubyists can probably already spot the problem. The
show-stopper was that the category of the event (like "Birthday" or
something) could be <code>nil</code>, and (with apologies to Murphy) is that if
something <em>can</em> be <code>nil</code> then at some point it <em>will</em> be <code>nil</code>.</p>

<p>So, sure enough, an event snuck into the database (remember your
database constraints, friends) that didn't have an associated
category, so then <code>self.category</code> was itself, <code>nil</code> and in Ruby you
can't send the <code>name</code> message (or call the <code>name</code> method, if you like)
on <code>nil</code>.</p>

<pre><code>1.9.3p392 :001 &gt; nil.name
NoMethodError: undefined method `name' for nil:NilClass
</code></pre>

<p>Which makes sense when <code>nil</code> is an object. Basically, all you can do
with a <code>nil</code> is ask if it is in fact nil:</p>

<pre><code>1.9.3p392 :002 &gt; nil.nil?
=&gt; true
</code></pre>

<p>In the code above my quick fix was to protect the method call using
try:</p>

<pre><code>def to_s
  ...
  string += self.category.try(:name) || ''
  ...
end
</code></pre>

<p>The effect of <code>try</code> here is that when <code>self.category</code> comes up
<code>nil</code>, like it was in my case, then the whole chain of methods
<code>self.category.try(:name)</code> itself comes up <code>nil</code>, rather than blowing
up. See the difference? The last part of that line is so that I end up
with a String that can be appended to the built-up <code>string</code> output.</p>

<p>At that point I had something that passed my new regression test and I
could have conceivably moved on. But I figured that I could express
what was going on in a clearer way than what was there.</p>

<p>"What is going on here?" I asked myself. It is a bunch of attributes
that I'm gluing together and I just want to skip anything that isn't
there. In my mind that sounded like filtering:</p>

<pre><code>def to_s
  [description, name, location, user.try(:company), category.try(:name), event_type]
    .compact.join ''
end
</code></pre>

<p>What I do here is to make an array of all the attributes that I want.
Next, I use the <code>compact</code> method, which filters out any elements that
are <code>nil</code>. Finally, I join them back together using an empty string as
the in-between character, this also has the effect of coercing each item
to a string -- if it wasn't already.</p>

<p>I think it reads pretty well. "Computer! Bring me the following
attributes, remove the bad ones, and stick them all together! Do it
right now!" (For best effect, yell this in your open-plan office; it
feels great).</p>

<p>And so my refactoring story stopped, or so I thought.</p>

<p>Yet, it seemed that there was another pattern lurking here. But to talk
about it, I'll have to drop the Monoid!</p>

<h2>Droppin' the Monoid</h2>

<p>What's a monoid? How do you even say it? I go with "Moe-noid" but I've
heard "Monn-oid" too. This leads to the common saying: "You say
Moe-noid I say Monn-oid."</p>

<p>As for <em>what</em> it is, that's more interesting; and easier for me to
convey than pronunciations. Monoids are about <em>combining things</em>. But
this combining comes with a rule that helps do it in a nicely ordered
way. Because all these different ways of combining share characteristics
we can draw comparisons between things that don't seem the same. Take a
look at these things and see if you spot the similarity:</p>

<ol>
<li>Addition:

<ol>
<li>You can put <em>two numbers</em> together to get another <em>number</em></li>
<li>If you put <em>any number</em> together with <em>zero</em>, you just get the
<em>first number back</em></li>
<li>If you have <em>three numbers</em> to add, it doesn't matter if you do
(a + b) + c or a + (b + c), those are <em>equal</em></li>
</ol>
</li>
<li>Multiplication:

<ol>
<li>You can multiply <em>two numbers</em> together to get another <em>number</em></li>
<li>If you multiply <em>any number</em> together with <em>one</em>, you just get
the <em>first number back</em></li>
<li>If you have <em>three numbers</em> to multiply, it doesn't matter if you
do (a * b) * c or a * (b * c), those are <em>equal</em></li>
</ol>
</li>
<li>String concatenation:

<ol>
<li>You can put <em>two strings</em> together to get another <em>string</em></li>
<li>If you put <em>any string</em> together with the empty string, you just
get the <em>first string back</em></li>
<li>If you have <em>three strings</em> to concatenate, it doesn't matter if
you do (s1 + s2) + s3 or s1 + (s2 + s3) those are <em>equal</em></li>
</ol>
</li>
</ol>


<p>Are you seeing a pattern? All these things share the same three rules.
And the rules all talk about two aspects, the first aspect is the
<em>operation</em> that we're talking about: addition, multiplication, and
concatenation. The second aspect is the "neutral" element: zero, one,
and empty string. The neutral element is special because when you
combine something with it, the result is the same as the other operand:</p>

<ul>
<li>5 + 0 = 5</li>
<li>5 * 1 = 5</li>
<li>"five" + "" = "five"</li>
</ul>


<p>Clearly something is up. There's <em>definitely</em> a shared pattern
here. What is it? What is it used for? Well, enter the <em>Monoid!</em></p>

<p>Let's look at Monoid as it is implemented in Haskell. I'm about to lay
some syntax on you, so get ready:</p>

<pre><code>class Monoid a where
  mempty :: a
  mappend :: a -&gt; a -&gt; a
  mconcat :: [a] -&gt; a
    -- Defined in `Data.Monoid'
</code></pre>

<p>There are like a few new things that I just introduced. You may have
noticed that in the first post, I didn't really mention type signatures
all that much, but I think I'm going to finally have to break with that.
It'll be a little to digest, but I think it'll pay off soon.</p>

<h3>A quick aside about multiple parameters</h3>

<p>When you see <code>a -&gt; a</code>, think of that as a function that takes some type
<code>a</code>, and returns that same type <code>a</code>. This is like the type of <code>sqrt</code>,
<code>sqrt :: a -&gt; a</code> takes a single number and returns a number.</p>

<p>Then there are two parameters. These are written like this <code>foo :: a -&gt;
a -&gt; a</code>, you may have expected that to be like <code>otherFoo :: (a, a) -&gt;
a</code>, but that means something different. Here's the scoop: in Haskell,
functions only take one argument! Yeah. The way that it works is that
when you give an argument to a function in haskell, it is happy eating
that first argument and giving you back a <em>new function</em>:</p>

<pre><code>(+) :: Num a =&gt; a -&gt; a -&gt; a
</code></pre>

<p>If you're familiar with interfaces, you could say that <code>a</code>, <em>implements</em>
the <code>Num</code> interface, letting us know we can add it, multiply it, negate
it, and etc. Read it like: "a can be any type as long as that type can
do <code>Num</code>-things."</p>

<p>Let's feed plus an argument:</p>

<pre><code>(+3) :: Num a =&gt; a -&gt; a
</code></pre>

<p>I have a <em>totally new function</em> that now expects a single number and
will return a number. I've effectively created a "plus3" function!</p>

<pre><code>(+3) 2 :: Num a =&gt; a
</code></pre>

<p>he last type signature is when I've called "plus3" with the argument 2.
The result has no skinny arrows left, it is <em>just a value of type <code>a</code></em>.
I should be able to evaluate that and see what I get:</p>

<pre><code>&gt; (3+) 2
5
</code></pre>

<p>yup. The same thing is sort of awkward in something like JavaScript:</p>

<pre><code>(function(f, a) {
  return function(b) { return f(a, b); };
})(add, 3)(2);
</code></pre>

<h3>Back to your regularly scheduled blog post</h3>

<p>Starting at the top: <code>class Monoid a where</code> defines something called a
<code>typeclass</code>, which you can think of as being similar to an <em>interface</em>.
Like other implementations of interfaces, it can be "polymorphic";
we don't have to say that it only applies to Strings or Integers or
whatever. We can just say that it applies to <em>some</em> type, and I'll
let the <code>a</code> stand-in for that type. That <code>a</code> is really important too,
because all the following lines make use of it!</p>

<p><code>mempty</code> gives you back the "neutral" element that we talked about
before. This is the element that doesn't change things when it is
combined with other elements. Since it is just an element, it simply has
type <code>a</code>; if we're talking about Strings it would type String (and be
the empty string). If we're dealing with addition, it would have type
Int (and be 0).</p>

<p><code>mappend</code> is the operation from above, it combines two elements to
produce another element:</p>

<pre><code>Sum 0     `mappend` Sum 1         -- equals 1
Product 1 `mappend` Product 5     -- equals 5
""        `mappend` "foo"         -- equals "foo"
</code></pre>

<p>Now, ther is a bit of weirdness about the <code>Sum</code> and <code>Product</code> above (can
you guess why? I'll explain in just a bit but just see that it works
basically like I sketched out above).</p>

<p>Lastly we come to <code>mconcat</code>, this guy is the logical extension of
<code>mappend</code>. If you had a big list of things and you just put <code>mappend</code>s
between them all, that's <code>mconcat</code>. This works because we know that
the order that we group things can't affect the outcome!</p>

<pre><code>("foo" `mappend` "bar") `mappend` "baz" == "foo" `mappend` ("bar" `mappend` "baz")
-- True
</code></pre>

<p>And, in fact, it is okay to write things like:</p>

<pre><code>"foo" `mappend` "bar" `mappend` "baz"
-- "foobarbaz"
</code></pre>

<p>Cool.</p>

<p>Right that bit about there being a "Sum" and a "Product" that snuck
in. The reason is that there are two ways to think about numbers as
being monoids: as <em>sums</em> and as <em>products</em>. They both have numbers as
their elements, but they have different <code>mempty</code>s and <code>mappend</code>s! In
haskell if you just do:</p>

<pre><code>1 `mappend` 5 -- error

Ambiguous type variable `a0' in the constraints:
  (Num a0) arising from the literal `1' at &lt;interactive&gt;:38:1
  (Monoid a0)
</code></pre>

<p>Ugh, yeah, it isn't the most clear, but the issue is that haskell
doesn't know which to pick, should it use <code>mempty = 1</code> or <code>mempty =
0</code>?</p>

<p>Okay, okay. Monoids. They're a thing. How does this tie back into the
refactoring story from above? Well, there are two other cool things
that work as monoids: Maybe and Lists!</p>

<h2>Refactoring with monoids</h2>

<p>I'll show you what I'm plotting and then reveal to you how we get
here. It'll be like an episode of Star Trek where some crazy thing
goes down (Enterprise explodes) and then they're all like "48 Hours
Earlier..." (Shot of Data reading poetry or something). You know those
ones.</p>

<p>So back to my example, I had left off with this:</p>

<pre><code>def to_s
  [description, name, location, user.try(:company), category.try(:name), event_type]
    .compact.join ''
end
</code></pre>

<p>bit of Ruby code, a nice regression test, but a slightly metallic
taste in my mouth; perhaps zinc with a dash of bismuth. I liked what I
had come up with but I still had that lingering feeling that I had
missed something more essential. Until one morning this:</p>

<pre><code>to_s :: Event -&gt; String
to_s e = mconcat [eventDescription e, eventName e, eventLocation e, eventName e]
</code></pre>

<p>popped into my head. If you've followed the monoid description so far
this should generally make sense. The above function is a bit like
doing:</p>

<pre><code>eventDescription `mappend` eventName `mappend` ...
</code></pre>

<p>which conveniently, is just what <code>mconcat</code> does. The behavior is that
any two strings get joined together and, since the result is a string it
can in turn be joined again. Empty strings are just skipped, so that the
result of all that is just the concatenation of all non-empty strings!</p>

<p>But I hear some muttering... what I showed there only works if we're
guaranteed to have at least empty strings for each of our
method/function calls. In the Ruby version, there was a very real
possibility that certain calls could come up nil! What then?</p>

<h2>Two ways to get the bugs out</h2>

<p>Yeah, that's the issue right? That we live in an unreliable world. Those
method calls represent some unreliable real-world data! We pulled it out
of a database or we got it from who-knows-where. What then?</p>

<p>I can think of two things right away.</p>

<h3>Types</h3>

<p>Here's what creating an event datatype might look like in Haskell:</p>

<pre><code>module Event (Event, mkEvent, eventDescription,
              eventName, eventLocation, eventType) where

data Event = Event { eventDescription :: String
                   , eventName        :: String
                   , eventLocation    :: String
                   , eventType        :: String
                   } deriving Show

mkEvent = Event "" "" "" ""
</code></pre>

<p>There's a lot of Haskell syntax going on here, but the idea is simple.
We're forcing everyone to use the <code>mkEvent</code> "smart constructor" in order
to make events. Here's an example:</p>

<pre><code>mkEvent {eventDescription = "Fun birthday party", eventName = "My Birthday"}
-- Event {eventDescription = "Fun birthday party", eventName = "My Birthday", eventLocation = "", eventType = ""}
</code></pre>

<p><code>mkEvent</code> is a pattern called a <em>smart constructor</em>. Inside <code>mkEvent</code>
we're providing default values for each field so that any we omit
get automatically filled with empty strings. Lastly, in our module
declaration, we're only exporting <code>mkEvent</code> (and the "getters"). This
means that outside this module you can't create an event except by using
<code>mkEvent</code>.</p>

<p>We know that it is always safe to use an event in the way that we were
above because the only way we can have an event "in the wild" is if it
has been properly constructed!</p>

<p>Effectively we're putting all the work on whoever is providing an event. If we
go and fetch a so-called "event" from the database, you'll have to have
<em>something</em> to fill in each field otherwise it isn't going to be an event:</p>

<pre><code>SELECT (description, name, location, type)
FROM events
WHERE type = 'birthday';

1 row
    description          name            location     type
------------------+--------------------+-----------+------------+
'Super fun b-day' | 'My 32nd Birthday' |    NULL   | 'birthday' |

-- Uh, oh! My db code has to figure out what to do here...
</code></pre>

<p>But it is all sunshine and roses back up in application-land because we can
just merrily go on our way, if we see an <code>Event</code> we <em>know</em> it is an event.</p>

<p>But it leaves the weird situation that our DB code has to know about an
app-level thing... an <code>Event</code>. We may just want the db to preserve NULLs and
let something else figure out what is going on.</p>

<h3>More monoids!</h3>

<p>Really. Yup! Because other things besides Sums, Products, and Strings make
monoids. You may be been starting to get a sixth sense for this stuff, but
here it is. The <code>Maybe</code>!</p>

<pre><code>data Maybe a = Nothing | Just a
</code></pre>

<p>Maybe goes by many names, but what it represents is pretty intuitive.
It is something that's there or not. It is like <code>nil</code>, but a bit more
civilized. It is your flakey friend that sometimes doesn't show up, but
who does so consistently so that you've learned to just write a "?" by
their name whenever you invite him somewhere.</p>

<p>It turns out that <code>Maybe</code> is also a monoid! I bet you can guess what the
"zero-y" element is: <code>Nothing</code>! And what would it look like to put two Maybes
together?</p>

<pre><code>Just "foo" `mappend` Nothing = Just "foo"
Nothing `mappend` Just "foo" = Just "foo"
Just "foo" `mappend` Just "bar" = Just "foobar"
</code></pre>

<p>(Note: There's some behavior here that I haven't talked about yet. Did
you notice that <code>Just "foo"</code> combined with <code>Just "bar"</code> <em>also</em> combined
their contents? I'll get to that.)</p>

<p>The monoid behavior fits really nicely because there's a built-in
concept of "nothing to see here" in Maybe.</p>

<p>It makes a lot of sense then to model our DB-returned data as:</p>

<pre><code>eventDescription :: Maybe String
</code></pre>

<p>Instead of just being strings, these are only potential strings. This
makes sense and eliminates ambiguity. In the previous solution, if we
saw an empty string, it could be for one of two reasons: it was found
and is empty, or it wasn't found at all. Was NULL in the database?
Was it <em>there</em> but just happened to be empty? Is the location of the
birthday a guarded secret?</p>

<p>Maybe is important not for avoiding null-pointer blowups (though it
is great for that), but because it makes <em>meaning clearer</em> it moves
null-ness <em>out-of-band</em>.</p>

<p>So let's go with that. All of our event functions are a bit unreliable,
but they are <em>predictably unreliable</em> which is okay. Here's how the
definition of <code>Event</code> and <code>mkEvent</code> change:</p>

<pre><code>data Event = Event { eventDescription :: Maybe String
                   , eventName        :: Maybe String
                   , eventLocation    :: Maybe String
                   , eventType        :: Maybe String
                   } deriving Show

mkEvent = Event Nothing Nothing Nothing Nothing
</code></pre>

<p>What does that make of our original <code>to_s</code> function?</p>

<pre><code>to_s :: Event -&gt; Maybe String
to_s e = mconcat [eventDescription e, eventName e,
                  eventLocation e, eventType e]
</code></pre>

<p>it looks basically the same! All I changed was the return type. Our
function could have all <code>Nothing</code>s and so then itself be <code>Nothing</code>. Now
that we're up in our application code, we're in a position to make a
choice about that. In the case where everything is <code>Nothing</code> (woah, like
<em>deep</em> man), it probably makes sense to just say our event description
should be an empty string:</p>

<pre><code>to_s :: Event -&gt; String
to_s e = maybe "" id (mconcat [eventDescription e, eventName e, eventLocation e, eventType e])
</code></pre>

<p>I'm using <code>maybe</code> (the function) to give default values for the two
cases:</p>

<ol>
<li>If the whole thing evaluates to Nothing, then use the empty string</li>
<li>Otherwise, just use the value you got (it is <code>id</code> here because
<code>maybe</code> lets you run a function on the value inside the <code>Just</code>,
e.g. Just "fred" means give me <code>id "fred" = "fred"</code>, <code>id</code> just
returns its argument)</li>
</ol>


<p>So how does this work? Like I hinted at earlier, the stuff <em>inside</em> the
<code>Maybe</code> is getting joined together. There are multiple levels of monoid
going on</p>

<ol>
<li>Maybe is a monoid</li>
<li>Strings are monoids</li>
</ol>


<p>Maybe is a monoid in an interesting way, it says that its <em>contents</em>
must also be a monoid!</p>

<pre><code>instance Monoid a =&gt; Monoid (Maybe a) where
  mempty = Nothing
  ...
  Just m1 `mappend` Just m2 = Just (m1 `mappend` m2)
</code></pre>

<p>In the words of Ted Theodore Logan, "woah".</p>

<p>The first interesting bit is what happens when we have two <code>Just</code>
values. We combine those inner values. And how do we do it? With what
else? <code>mappend</code>!</p>

<p>We know that we can do that because of the other interesting bit of
the instance definition <code>instance Monoid a =&gt; Monoid (Maybe a) where</code>,
there's a "fat arrow" there that constrains the <code>a</code> to <em>also</em> be a
monoid! You can read it like "Given that <code>a</code> is a monoid, then <code>Maybe a</code>
is a monoid too, here's how..."</p>

<p>Knowing what we do about the String and the Maybe monoid gives us just
the behavior we saw:</p>

<pre><code>Just "foo" `mappend` Just "bar" = Just "foobar"
</code></pre>

<p>Maybe could be sure that it is allowed to join its contents (the Strings)
because that's what the monoid definition says for the content of a Maybe!</p>

<h2>Wrapping up</h2>

<p>So where did we get? I started out with this code:</p>

<pre><code>def to_s
  string = ""
  string += self.description if self.description
  string += self.name if self.name
  string += self.location if self.location
  string += self.user.try(:company) if self.user
  string += self.category.name
  string += self.event_type
  string
end
</code></pre>

<p>and ended up with this ruby:</p>

<pre><code>def to_s
  [description, name, location, user.try(:company), category.try(:name), event_type]
    .compact.join ''
end
</code></pre>

<p>or this in Haskell:</p>

<pre><code>to_s :: Event -&gt; String
to_s e = maybe "" id (mconcat [eventDescription e, eventName e, eventLocation e, eventType e])
</code></pre>

<p>But we learned that there's some cool patterns behind the idea of gluing things
together that's shared by addition, multiplication, and string concatenation
(<a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Monoid.html#section.i:Monoid">and other stuff too</a>).
One notably cool one that I skipped is <code>Ordering</code>. This is the typeclass that
lets you sort things (put them in an order). It just says if something is
<code>LT</code>, <code>GT</code>, or <code>EQ</code> to something else. So you could have a list of things that
can be sorted many different ways:</p>

<pre><code>data User = User Name Age Height
userList = [User "Jimbo" 32 5.9, User "Molly" 30 5.5, User "Gary" 32 6.0]
</code></pre>

<p>and you could have several different sorting functions:</p>

<pre><code>age, name, height :: User -&gt; User -&gt; Ordering
</code></pre>

<p>all of them take two users and then return either <code>LT</code>, <code>GT</code>, or <code>EQ</code>. What's
cool is that <code>Ordering</code> belongs to the Monoid typeclass! This means we can
combine our sorting functions in a really nice way:</p>

<pre><code>sortBy :: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; [a]

sortBy (age `mappend` height `mappend` name) userList
[User "Molly" 30 5.5, User "Jimbo" 32 5.9, User "Gary" 32 6.0]
</code></pre>

<p>The users got sorted first by age, then by height, and lastly by name.
We were able to combine the sorting functions just using the monoid
machinery.</p>

<p>There's lots more out there to find. What I like about learning other
languages is that they give me a larger palette of ideas to work with.
Haskell seems to be an almost inexhaustible store of very general
patterns that I've been happily mining for a while.</p>

<p>If it stopped there though, that would be cool, for what it's worth.
But it couples these really interesting patterns and interfaces with a
language that has some tricks up its sleeve.</p>

<p>In my next article I'll develop and compare some apps that are in my
field: web applications. If you're familiar with Rails I'll introduce
you to Yesod.</p>

<p>Also, here's <a href="http://bendyworks.com/geekville/articles/2012/12/from-ruby-to-haskell-part-1-testing">part 1 of this series</a>.</p>
