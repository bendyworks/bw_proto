<h1 class="blog-title">From Ruby to Haskell, Part 2: Similarity, Refactoring, and Patterns</h1>


<p>It has been a while since I last wrote one of these posts and I didn't
want to leave people sitting by their computer desks forever, waiting
with bated breath for the next one to pop up in your Google Reader
feed (...whispers from the Internet...), okay never mind that Google
Reader thing.</p>

<p>I had a lot to cover in my exploration of Ruby and Haskell and I don't
even feel like I made a big chip in the surface of all that I wanted to
talk about. But I'm going to keep at it until I feel like I've said all
I want to cover.</p>

<p>This time I want to talk about three subjects:</p>

<ol>
<li>How ruby and haskell are similar and, unavoidably, how they're different.</li>
<li>Refactoring code because I don't think that this is solely the domain of the OOP'er; refactoring functional code is <em>way cool</em></li>
<li>Patterns also don't belong to any sort of programmer in particular. Patterns, and here I mean something like "an underlying repetition or similarity". Functional programming has some great patterns which, once you start to model code with them, you can claim great wins in concision.</li>
</ol>


<p>But as I was writing this I wondered what order I would cover these
subjects and the more I thought about it the less sense it made to me to
talk about any one of them without pulling in the other two. What sort
of refactoring can you do that <em>isn't</em> pulling out some commonality
among seemingly-disparate hunks of code? Hmmm?</p>

<p>That being said, let me talk about a refactoring story.</p>

<h2>My refactoring story</h2>

<p>I was strolling through a codebase when I found a bit of code... Well
that's not quite the truth. My program raised an error and then as I was
debugging I found the following:</p>

<pre><code>def to_s
  string = ""
  string += self.description if self.description
  string += self.name if self.name
  string += self.location if self.location
  string += self.user.try(:company) if self.user
  string += self.category.name
  string += self.event_type
  string
end
</code></pre>

<p>Seasoned Rubyists can probably already spot the problem. The
show-stopper was that the category of the event (like "Birthday" or
something) could be <code>nil</code>, and (with apologies to Murphy) is that if
something <em>can</em> be <code>nil</code> then at some point it <em>will</em> be <code>nil</code>.</p>

<p>So, sure enough, an event snuck into the database (remember your
database constraints, friends) that didn't have an associated
category, so then <code>self.category</code> was itself, <code>nil</code> and in Ruby you
can't send the <code>name</code> message (or call the <code>name</code> method, if you like)
on <code>nil</code>.</p>

<pre><code>1.9.3p392 :001 &gt; nil.name
NoMethodError: undefined method `name' for nil:NilClass
</code></pre>

<p>Which makes sense when <code>nil</code> is an object. Basically, all you can do
with a <code>nil</code> is ask if it is in fact nil:</p>

<pre><code>1.9.3p392 :002 &gt; nil.nil?
=&gt; true
</code></pre>

<p>In the code above my quick fix was to protect the method call using
try:</p>

<pre><code>def to_s
  ...
  string += self.category.try(:name) || ''
  ...
end
</code></pre>

<p>The effect of <code>try</code> here is that when <code>self.category</code> comes up
<code>nil</code>, like it was in my case, then the whole chain of methods
<code>self.category.try(:name)</code> itself comes up <code>nil</code>, rather than blowing
up. See the difference? The last part of that line is so that I end up
with a String that can be appended to the built-up <code>string</code> output.</p>

<p>At that point I had something that passed my new regression test and I
could have conceivably moved on. But I figured that I could express
what was going on in a clearer way than what was there.</p>

<p>"What is going on here?" I asked myself. It is a bunch of attributes
that I'm gluing together and I just want to skip anything that isn't
there. In my mind that sounded like filtering:</p>

<pre><code>def to_s
  [description, name, location, user.try(:company), category.try(:name), event_type]
    .compact.join ''
end
</code></pre>

<p>What I do here is to make an array of all the attributes that I want.
Next, I use the <code>compact</code> method, which filters out any elements that
are <code>nil</code>. Finally, I join them back together using an empty string as
the in-between character, this also has the effect of coercing each item
to a string -- if it wasn't already.</p>

<p>I think it reads pretty well. "Computer! Bring me the following
attributes, remove the bad ones, and stick them all together! Do it
right now!" (For best effect, yell this in your open-plan office; it
feels great).</p>

<p>And so my refactoring story stopped, or so I thought.</p>

<p>Yet, it seemed that there was another pattern lurking here. But to talk
about it, I'll have to drop the Monoid!</p>

<h2>Droppin' the Monoid</h2>

<p>What's a monoid? How do you even say it? I go with "Moe-noid" but I've
heard "Monn-oid" too. This leads to the common saying: "You say
Moe-noid I say Monn-oid."</p>

<p>As for <em>what</em> it is, that's more interesting; and easier for me to
convey than pronunciations. Monoids are about <em>combining things</em>. But
this combining comes with a rule that helps do it in a nicely ordered
way. Because all these different ways of combining share characteristics
we can draw comparisons between things that don't seem the same. Take a
look at these things and see if you spot the similarity:</p>

<ol>
<li>Addition:

<ol>
<li>You can put <em>two numbers</em> together to get another <em>number</em></li>
<li>If you put <em>any number</em> together with <em>zero</em>, you just get the
<em>first number back</em></li>
<li>If you have <em>three numbers</em> to add, it doesn't matter if you do
(a + b) + c or a + (b + c), those are <em>equal</em></li>
</ol>
</li>
<li>Multiplication:

<ol>
<li>You can multiply <em>two numbers</em> together to get another <em>number</em></li>
<li>If you multiply <em>any number</em> together with <em>one</em>, you just get
the <em>first number back</em></li>
<li>If you have <em>three numbers</em> to multiply, it doesn't matter if you
do (a * b) * c or a * (b * c), those are <em>equal</em></li>
</ol>
</li>
<li>String concatenation:

<ol>
<li>You can put <em>two strings</em> together to get another <em>string</em></li>
<li>If you put <em>any string</em> together with the empty string, you just
get the <em>first string back</em></li>
<li>If you have <em>three strings</em> to concatenate, it doesn't matter if
you do (s1 + s2) + s3 or s1 + (s2 + s3) those are <em>equal</em></li>
</ol>
</li>
</ol>


<p>Are you seeing a pattern? All these things share the same three rules.
And the rules all talk about two aspects, the first aspect is the
<em>operation</em> that we're talking about: addition, multiplication, and
concatenation. The second aspect is the "neutral" element: zero, one,
and empty string. The neutral element is special because when you
combine something with it, the result is the same as the other operand:</p>

<ul>
<li>5 + 0 = 5</li>
<li>5 * 1 = 5</li>
<li>"five" + "" = "five"</li>
</ul>


<p>Clearly something is up. There's <em>definitely</em> a shared pattern
here. What is it? What is it used for? Well, enter the <em>Monoid!</em></p>

<p>Let's look at Monoid as it is implemented in Haskell. I'm about to lay
some syntax on you, so get ready:</p>

<pre><code>class Monoid a where
  mempty :: a
  mappend :: a -&gt; a -&gt; a
  mconcat :: [a] -&gt; a
    -- Defined in `Data.Monoid'
</code></pre>

<p>There are like a few new things that I just introduced. You may have
noticed that in the first post, I didn't really mention type signatures
all that much, but I think I'm going to finally have to break with that.
It'll be a little to digest, but I think it'll pay off soon.</p>

<h3>A quick aside about multiple parameters</h3>

<p>When you see <code>a -&gt; a</code>, think of that as a function that takes some type
<code>a</code>, and returns that same type <code>a</code>. This is like the type of <code>sqrt</code>,
<code>sqrt :: a -&gt; a</code> takes a single number and returns a number.</p>

<p>Then there are two parameters. These are written like this <code>foo :: a -&gt;
a -&gt; a</code>, you may have expected that to be like <code>otherFoo :: (a, a) -&gt;
a</code>, but that means something different. Here's the scoop: in Haskell,
functions only take one argument! Yeah. The way that it works is that
when you give an argument to a function in haskell, it is happy eating
that first argument and giving you back a <em>new function</em>:</p>

<pre><code>(+) :: Num a =&gt; a -&gt; a -&gt; a
</code></pre>

<p>If you're familiar with interfaces, you could say that <code>a</code>, <em>implements</em>
the <code>Num</code> interface, letting us know we can add it, multiply it, negate
it, and etc. Read it like: "a can be any type as long as that type can
do <code>Num</code>-things."</p>

<p>Also, here's <a href="http://bendyworks.com/geekville/articles/2012/12/from-ruby-to-haskell-part-1-testing">part 1 of this series</a>.</p>

<div id='disqus_thread'>
<script>
  //<![CDATA[
    var disqus_shortname  = "bendyworks";
    var disqus_developer  = "0";
    var disqus_identifier = "articles_46";

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
  //]]>
</script>

</div>
